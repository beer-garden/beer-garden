version: '3.5'

x-definitions: &env
    # IMPORTANT!!
    # Change this to whatever you want your garden name / namespace default to be
    BG_GARDEN_NAME: docker

    # IMPORTANT!!
    # Change this to support both local and remote plugins
    # Should be resolvable from inside and outside the docker network
    BG_PLUGIN_MQ_HOST: localhost

    # IMPORTANT!!
    # If you are connection to a Parent BG instance, toggle true
    BG_PARENT_HTTP_ENABLE: "false"

    # IMPORTANT !!
    # If you are connecting to a Parent BG instance, change this the resolvable DNS entry
    BG_PARENT_HTTP_HOST: localhost


services:
    beer-garden:
        image: bgio/beer-garden:3
        networks:
            - bg-network
        ports:
            - "2337:2337"
            - "2338:2338"
        volumes:
            - ./data/logging-config.yaml:/src/example_configs/logging-config.yaml
            - ./data/localplugins:/plugins
        environment:
            <<: *env

            # If you are running in Ubuntu, then you need to set the Timezone
            # We are actively investigating why this is
            #TZ: UTC

            # Point at the correct database
            BG_DB_HOST: mongodb
            BG_DB_NAME: beer_garden_v3

            # Point at the correct rabbit broker
            BG_MQ_HOST: rabbitmq
            BG_MQ_CONNECTIONS_ADMIN_USER: beer_garden
            BG_MQ_CONNECTIONS_ADMIN_PASSWORD: password
            BG_MQ_CONNECTIONS_MESSAGE_USER: beer_garden
            BG_MQ_CONNECTIONS_MESSAGE_PASSWORD: password

            # Enable stomp and point at the correct broker
            BG_ENTRY_STOMP_ENABLED: "false"
            BG_ENTRY_STOMP_HOST: activemq

            # We expose grafana for you, but you can change this to an
            # external grafana URL if you would like. It just adds a
            # link in our About section if it is defined.
            BG_METRICS_URL: http://localhost:3000
            BG_METRICS_PROMETHEUS_ENABLED: "false"
        depends_on:
            - mongodb
            - rabbitmq

    ui:
        image: bgio/ui:3
        networks:
            - bg-network
        ports:
            - "80:80"
              #- "443:443"
        environment:
            BEERGARDEN_HOST: "beer-garden"
            BEERGARDEN_PORT: "2337"
        depends_on:
            - beer-garden

    grafana:
        image: grafana/grafana:5.2.3
        ports:
            - "3000:3000"
        volumes:
            - ./data/grafana/provisioning:/etc/grafana/provisioning
            - ./data/grafana/dashboards:/var/lib/grafana/dashboards
        networks:
            - bg-network
        depends_on:
            - prometheus

    mongodb:
        image: mongo:4.2
        restart: always
        networks:
            - bg-network
        ports:
          - "27017:27017"
        volumes:
            - mongo-data:/data/db
            - mongo-config:/data/configdb

    prometheus:
        image: prom/prometheus:v2.3.2
        ports:
          - "9091:9090"
        networks:
            - bg-network
        volumes:
            - ./data/prometheus:/prometheus-data
        command:
            --config.file=/prometheus-data/prometheus.yml

    ldap:
        image: osixia/openldap:latest
        container_name: ldap
        hostname: ldap
        ports:
            - "389:389"
            - "636:636"
        environment: 
            - LDAP_ORGANISATION=Example
            - LDAP_DOMAIN=example.com
            - LDAP_ADMIN_USERNAME=admin
            - LDAP_ADMIN_PASSWORD=admin
            - LDAP_CONFIG_PASSWORD=config
            - "LDAP_BASE_DN=dc=example,dc=com"
        networks:
            - bg-network

    phpldapadmin:
        image: osixia/phpldapadmin:latest
        container_name: phpldapadmin
        hostname: phpldapadmin
        ports: 
            - "9080:80"
        environment: 
            - PHPLDAPADMIN_LDAP_HOSTS=ldap
            - PHPLDAPADMIN_HTTPS=false
        networks:
            - bg-network
        depends_on:
            - ldap

    rabbitmq:
        image: rabbitmq:3.8-management-alpine
        restart: always
        hostname: rabbitmq
        networks:
            - bg-network
        environment:
            - RABBITMQ_DEFAULT_USER=beer_garden
            - RABBITMQ_DEFAULT_PASS=password
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - rabbitmq-home:/var/lib/rabbitmq

    activemq:
        image: vromero/activemq-artemis:2.16-alpine-latest
        restart: always
        environment:
            - ARTEMIS_USERNAME=beer_garden
            - ARTEMIS_PASSWORD=password
        networks:
            - bg-network
        ports:
          - "61613:61613"
          - "8161:8161"
        volumes:
            - ./data/activemq-config/etc-override-non-ssl:/var/lib/artemis/etc-override

    apm-server:
        image: docker.elastic.co/apm/apm-server:7.17.22
        depends_on:
            - elasticsearch
            - kibana
        cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
        cap_drop: ["ALL"]
        ports:
            - 8200:8200
        networks:
            - bg-network
        command: >
            apm-server -e
                -E apm-server.rum.enabled=true
                -E setup.kibana.host=kibana:5601
                -E setup.template.settings.index.number_of_replicas=0
                -E apm-server.kibana.enabled=true
                -E apm-server.kibana.host=kibana:5601
                -E output.elasticsearch.hosts=["elasticsearch:9200"]
        healthcheck:
            interval: 10s
            retries: 12
            test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
        environment:
            - bootstrap.memory_lock=true
            - cluster.name=docker-cluster
            - cluster.routing.allocation.disk.threshold_enabled=false
            - discovery.type=single-node
            - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms512m -Xmx512m
        ulimits:
            memlock:
                hard: -1
                soft: -1
        volumes:
            - esdata:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - bg-network
        healthcheck:
            interval: 20s
            retries: 10
            test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.22
        depends_on:
            - elasticsearch
        environment:
            ELASTICSEARCH_URL: http://elasticsearch:9200
            ELASTICSEARCH_HOSTS: http://elasticsearch:9200
        ports:
            - 5601:5601
        networks:
            - bg-network
        healthcheck:
            interval: 10s
            retries: 20
            test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

networks:
    bg-network:
        driver: bridge
        name: bg-network

volumes:
    plugins:
    plugin-logs:
    mongo-data:
    mongo-config:
    rabbitmq-home:
    esdata:
        driver: local
