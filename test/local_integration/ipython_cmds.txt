import os
import sys
from pathlib import Path
from brewtils.rest.easy_client import get_easy_client
from brewtils.schema_parser import SchemaParser
from brewtils.models import PatchOperation

sys.path = [str(Path.cwd() / "test/integration")] + sys.path
from helper import RequestGenerator, setup_easy_client, get_config, wait_for_response

os.environ.update({"BG_HOST": "localhost", "BG_SSL_ENABLED": str(False)})



ez_client = get_easy_client()
child_ez_client = get_easy_client(bg_host="localhost", bg_port=2347, ssl_enabled=False)
parser = SchemaParser()
response = ez_client.client.session.get(ez_client.client.base_url + "api/v1/gardens/")
gardens = parser.parse_garden(response.json(), many=True)
child_garden = gardens[0]
child_garden.connection_type = "HTTP"
child_garden.connection_params = {
            "http": {"host": "beer-garden-child", "port": 2337, "ssl": False}
        }
patch = PatchOperation(
            operation="config",
            path="",
            value=parser.serialize_garden(child_garden, to_string=False),
        )
payload = parser.serialize_patch(patch)
response = ez_client.client.session.patch(
            ez_client.client.base_url
            + "api/v1/gardens/"
            + "dockerchild",
            data=payload,
            headers=ez_client.client.JSON_HEADERS,
        )



def system_spec():
    return {"system": "complex", "system_version": "3.0.0.dev0", "instance_name": "c1"}

rgen = RequestGenerator(**{
        "namespace": "childdocker",
        "system": "echo",
        "system_version": "3.0.0.dev0",
        "instance_name": "default",
        "command": "say",
    })
request = rgen.generate_request(parameters={"message": "test_string", "loud": True})
new_request = child_ez_client.create_request(request)

rgen = RequestGenerator(**{"system": "complex", "system_version": "3.0.0.dev0", "instance_name": "c1"})
request = rgen.generate_request(command="echo_model_with_nested_defaults_no_main")
ez_client = setup_easy_client()


